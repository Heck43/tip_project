/**
 * Функция rootPercent - вычисляет процентное содержание заданного корня в строке.
 * 
 * Алгоритм:
 * 1. Получаем входные строки и приводим их к нижнему регистру для регистронезависимого поиска
 * 2. Создаем рабочую копию исходной строки для модификаций
 * 3. Последовательно находим все вхождения корня в строке
 * 4. При каждом нахождении:
 *    - увеличиваем счетчик вхождений
 *    - удаляем найденный корень из рабочей копии строки
 * 5. Вычисляем процент по формуле: (количество вхождений × длина корня) / длина исходной строки × 100
 * 6. Выводим результат, округленный до целого числа
 * 
 * Логика работы:
 * Сначала функция преобразует обе строки (исходную и корень) к нижнему регистру, чтобы поиск не зависел от регистра символов.
 * Затем создается рабочая копия исходной строки, чтобы можно было модифицировать её без изменения оригинала.
 * В цикле последовательно ищутся все вхождения корня в рабочей копии строки:
 * При каждом нахождении корня увеличивается счетчик
 * Найденный корень удаляется из рабочей строки
 * Поиск продолжается, пока корни больше не находятся
 * Процент вычисляется по формуле: (количество найденных корней × длина корня) / длина исходной строки × 100
 * Результат округляется до целого числа и выводится на экран
 * Важные особенности алгоритма:
 *      - Функция учитывает все вхождения корня, а не только первое
 *      - При расчете используется суммарная длина всех найденных корней относительно общей длины строки
 *      - Функция не различает регистр символов при поиске
 *      - Корни не пересекаются, так как каждый найденный корень удаляется из строки
 * Пример показывает, какую часть строки "Вутка Шуточки Шутейки Прибаутка" составляет корень "Утка"
 * 
 * Функция показывает, какой процент от общей длины исходной строки занимает заданный корень
 * 
 * @param key - исходная строка, в которой ищем корень
 * @param root - искомый корень (подстрока)
 */
function rootPercent(key: string, root: string): void {
  // Приводим строки к нижнему регистру для регистронезависимого поиска
  key = key.toLowerCase();
  root = root.toLowerCase();

  // Запоминаем длину исходной строки и корня для дальнейших вычислений
  const keyLength: number = key.length;
  const rootLength: number = root.length;
  
  // Счетчик найденных вхождений корня
  let counter: number = 0;
  // Переменная для хранения позиции найденного корня
  let keyIndexOf: number = 0;
  
  // Создаем копию строки для модификации, чтобы не изменять исходную строку
  let modifiedKey: string = key;
  
  // Цикл продолжается, пока в строке находятся вхождения корня
  while (keyIndexOf !== -1) {
    // Ищем позицию корня в модифицированной строке
    keyIndexOf = modifiedKey.indexOf(root);
    
    // Если корень найден (позиция не равна -1)
    if (keyIndexOf !== -1) {
      // Увеличиваем счетчик найденных вхождений
      counter++;
      // Удаляем найденный корень из модифицированной строки
      modifiedKey = modifiedKey.replace(root, "");
    }
  }
  
  // Вычисляем процент содержания корня в исходной строке:
  // (количество вхождений * длина корня) / длина исходной строки * 100
  const percent: number = (counter * rootLength) / keyLength * 100;
  // Выводим результат, округленный до целого числа
  console.log(`Процент: ${Math.floor(percent)}%`);
}

// Пример использования функции:
// Ищем, какой процент строки "Вутка Шуточки Шутейки Прибаутка" составляет корень "Утка"
rootPercent("Вутка Шуточки Шутейки Прибаутка", "Утка"); 